@page "/users"
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Users</h3>

<button class="btn btn-primary" @onclick="ShowNewUserForm">Create New User</button>

@if (showNewUserForm)
{
    <EditForm Model="newUser" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label>Name</label>
            <InputText class="form-control" @bind-Value="newUser.Name" />
        </div>
        <div class="form-group">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="newUser.Email" />
        </div>
        <div class="form-group">
            <label>Role</label>
            <InputText class="form-control" @bind-Value="newUser.Role" />
        </div>
        <button type="submit" class="btn btn-success">Create</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelNewUser">Cancel</button>
    </EditForm>
}

@if (users == null)
{
    <p><em>Loading users...</em></p>
}
else if (users.Count == 0)
{
    <p>No users available.</p>
}
else
{
    <table class="table table-striped mt-3">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Role</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.Role</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditUser(user.Id)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(user.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public class UserDto
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? Email { get; set; }
        public string? Role { get; set; }
    }

    private List<UserDto> users = new();
    private bool showNewUserForm = false;
    private UserDto newUser = new UserDto();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await Http.GetFromJsonAsync<List<UserDto>>("api/users") ?? new List<UserDto>();
    }

    private void ShowNewUserForm()
    {
        showNewUserForm = true;
    }

    private void CancelNewUser()
    {
        showNewUserForm = false;
        newUser = new UserDto();
    }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync("api/users", newUser);
        if (response.IsSuccessStatusCode)
        {
            showNewUserForm = false;
            newUser = new UserDto();
            await LoadUsers();
        }
        else
        {
            // Handle error appropriately
        }
    }

    private void EditUser(int userId)
    {
        NavigationManager.NavigateTo($"/users/edit/{userId}");
    }

    private async Task DeleteUser(int userId)
    {
        var response = await Http.DeleteAsync($"api/users/{userId}");
        if (response.IsSuccessStatusCode)
        {
            await LoadUsers();
        }
        else
        {
            // Handle error appropriately
        }
    }
}